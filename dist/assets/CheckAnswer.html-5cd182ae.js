import{_ as o,p as e,q as c,s as n,R as a,t as u,Z as s,n as l}from"./framework-85e9f276.js";const p="/assets/img1-708f0e02.jpg",k="/assets/img1-modified-0bd7b358.jpg",i="/assets/image-20240218134340820-bc01344d.png",r="/assets/image-20240218144133774-f0eb4cfc.png",m="/assets/image-20240202214744848-57e87ca7.png",d="/assets/image-20240202214847785-9e3faa22.png",h="/assets/image-20240202215028187-519a479d.png",g="/assets/image-20240202215124766-1c7f405d.png",y={},b=s('<h1 id="答题卡填涂识别" tabindex="-1"><a class="header-anchor" href="#答题卡填涂识别" aria-hidden="true">#</a> 答题卡填涂识别</h1><h2 id="_1-开发目的" tabindex="-1"><a class="header-anchor" href="#_1-开发目的" aria-hidden="true">#</a> 1 开发目的</h2><p>我们在日常考试中不可避免的会使用到答题卡，而识别和批改答题卡却只能使用固定的读卡器。如果人一多效率低也不方便。所以我们能否利用 <code>Python</code>， 做一个好用的答题卡识别工具出来呢？</p><h2 id="_2-项目解释" tabindex="-1"><a class="header-anchor" href="#_2-项目解释" aria-hidden="true">#</a> 2 项目解释</h2><h3 id="_2-1-使用技术" tabindex="-1"><a class="header-anchor" href="#_2-1-使用技术" aria-hidden="true">#</a> 2.1 使用技术</h3><p>由于答题卡识别本质上还是 2D 图像识别，对于这一类型的需求。我们一般采用 <code>opencv</code> 完成。<code>opencv</code> 是一个极为强大的图片处理库，能够对图片完成复杂的处理</p><p>此外针对面向的群体，我制作了一个精美的 <strong>可视化界面</strong> 来帮助教师使用它。针对部署环境和封装后程序大小的考虑， 我采用了最基础的 <code>tkinter</code> 进行可视化界面的开发。作为 <code>python</code> 的自带库， 它的兼容性相当强。可以说只要你的电脑可以运行 <code>Python</code> 就可以用 <code>tkinter</code>，也规避了 <code>Python</code> 版本不同造成的语法不通的问题（<code>tkinter</code> 已经相当长时间没有更新了， <code>Python 3.0</code> 以后的 <code>tkinter</code> 语法没有较大差异）。并且由于 <code>Python</code> 自带 <code>tkinter</code>， 相应的环境部署也会较为简单</p><p>但 <code>tkinter</code> 也有着界面丑陋等等问题，虽然 <code>tkinter</code> 推出了 <code>ttk</code> 附属模块以支持使用当前系统风格的界面， 但这并不够。因此我引入了 <code>sv_ttk</code> 渲染引擎并对其进行修改，让 <code>tkinter</code> 不管在任何平台上都具有 WinUI 3.0 的风格界面</p><h3 id="_2-2-图像识别" tabindex="-1"><a class="header-anchor" href="#_2-2-图像识别" aria-hidden="true">#</a> 2.2 图像识别</h3><h4 id="_2-2-1-简单处理" tabindex="-1"><a class="header-anchor" href="#_2-2-1-简单处理" aria-hidden="true">#</a> 2.2.1 简单处理</h4><p>首先，我们先来观察一下答题卡是什么样子的</p><p><img src="'+p+'" alt="img1"></p><p><img src="'+k+`" alt="img1-modified"></p><p>可以发现，铅笔的黑与答题卡的白形成了强烈的对比，我们可以将其转化为灰度图</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 将图像转换为灰度图像</span>
<span class="token keyword">def</span> <span class="token function">convert_to_gray</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>
</code></pre></div><p>之后应用高斯模糊，减少图片噪声</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 对图像应用高斯模糊，以减少图像噪声</span>
<span class="token keyword">def</span> <span class="token function">apply_gaussian_blur</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
</code></pre></div><p>再将其转化为二值图像</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">apply_threshold</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>adaptiveThreshold<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>ADAPTIVE_THRESH_MEAN_C<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre></div><p>在经过上一步之后，我们已经完成了图像的初步处理，现在我们要进行对图像进行拆分以方便后续的图像识别</p><p><img src="`+p+`" alt="img1"></p><p>首先我们要获取该图片存在的所有轮廓</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 使用 Canny 算法检测图像的边缘</span>
<span class="token keyword">def</span> <span class="token function">detect_edges</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>Canny<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>

<span class="token comment"># 找到图像中的轮廓</span>
<span class="token keyword">def</span> <span class="token function">find_contours</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cnts <span class="token operator">=</span> cv2<span class="token punctuation">.</span>findContours<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>RETR_EXTERNAL<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>CHAIN_APPROX_SIMPLE<span class="token punctuation">)</span>
    <span class="token keyword">return</span> cnts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> imutils<span class="token punctuation">.</span>is_cv3<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> cnts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

<span class="token comment"># 在所有轮廓中找到最大的矩形轮廓</span>
<span class="token keyword">def</span> <span class="token function">find_largest_rectangle</span><span class="token punctuation">(</span>cnts<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cnts<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        cnts <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>cnts<span class="token punctuation">,</span> key<span class="token operator">=</span>cv2<span class="token punctuation">.</span>contourArea<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> c <span class="token keyword">in</span> cnts<span class="token punctuation">:</span>
            peri <span class="token operator">=</span> cv2<span class="token punctuation">.</span>arcLength<span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
            approx <span class="token operator">=</span> cv2<span class="token punctuation">.</span>approxPolyDP<span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0.02</span> <span class="token operator">*</span> peri<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>approx<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> approx
    <span class="token keyword">return</span> <span class="token boolean">None</span>
</code></pre></div><p>之后将这些步骤执行一遍，在轮廓图中获取所有轮廓并用极点表示</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 主函数，用于获取四点转换的坐标</span>
<span class="token keyword">def</span> <span class="token function">getFourPtTrans</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>
    gray <span class="token operator">=</span> convert_to_gray<span class="token punctuation">(</span>img<span class="token punctuation">)</span>  <span class="token comment"># 将图像转换为灰度图像</span>
    blurred <span class="token operator">=</span> apply_gaussian_blur<span class="token punctuation">(</span>gray<span class="token punctuation">)</span>  <span class="token comment"># 对灰度图像应用高斯模糊</span>
    thresholded <span class="token operator">=</span> apply_threshold<span class="token punctuation">(</span>blurred<span class="token punctuation">)</span>  <span class="token comment"># 对模糊的灰度图像应用阈值化</span>
    edged <span class="token operator">=</span> detect_edges<span class="token punctuation">(</span>thresholded<span class="token punctuation">)</span>  <span class="token comment"># 对阈值化的图像进行边缘检测</span>
    cnts <span class="token operator">=</span> find_contours<span class="token punctuation">(</span>edged<span class="token punctuation">)</span>  <span class="token comment"># 找到边缘检测图像的轮廓</span>
    docCnt <span class="token operator">=</span> find_largest_rectangle<span class="token punctuation">(</span>cnts<span class="token punctuation">)</span>  <span class="token comment"># 找到最大的矩形轮廓</span>
    <span class="token keyword">if</span> docCnt <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        docCnt <span class="token operator">=</span> docCnt<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 如果找到了矩形轮廓，将其重塑为 4x2 的矩阵</span>
    <span class="token keyword">return</span> docCnt  <span class="token comment"># 返回矩形轮廓的坐标</span>
</code></pre></div>`,25),w=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"提示"),n("p",null,"当时主要是考虑到可读性将步骤进行了拆分，也是为了我在以后的项目开发过程中能够便捷的对这些步骤复用")],-1),_=s(`<h4 id="_2-2-2-图像识别" tabindex="-1"><a class="header-anchor" href="#_2-2-2-图像识别" aria-hidden="true">#</a> 2.2.2 图像识别</h4><p>我做了几个函数，他们都分别是一个步骤。这有助于代码的可读性</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">getXY</span><span class="token punctuation">(</span>docCnt<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;传入四点坐标，返回(minX,minY,maxX,maxY)&#39;&#39;&#39;</span>
    <span class="token comment"># 初始化最小和最大的x、y坐标</span>
    minX<span class="token punctuation">,</span> minY <span class="token operator">=</span> docCnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    maxX<span class="token punctuation">,</span> maxY <span class="token operator">=</span> docCnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token comment"># 遍历四点坐标，更新最小和最大的x、y坐标</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        minX <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>minX<span class="token punctuation">,</span> docCnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        maxX <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>maxX<span class="token punctuation">,</span> docCnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        minY <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>minY<span class="token punctuation">,</span> docCnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        maxY <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>maxY<span class="token punctuation">,</span> docCnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment"># 返回最小和最大的x、y坐标</span>
    <span class="token keyword">return</span> minX<span class="token punctuation">,</span> minY<span class="token punctuation">,</span> maxX<span class="token punctuation">,</span> maxY
</code></pre></div><p>我们先找到最大和最小的 <code>(x, y)</code> 坐标，这样就能表示出一块区域</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">judgeQ</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;传入题号的x、y坐标，返回题号&#39;&#39;&#39;</span>
    <span class="token comment"># 根据x、y坐标计算题号</span>
    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">5</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">5</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">25</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">5</span>
</code></pre></div><p>之后通过题目的 <code>(x, y)</code> 坐标来计算题号，并返回它（这样才能批改）</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">judgeAns</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;传入答案的y坐标，返回答案&#39;&#39;&#39;</span>
    <span class="token comment"># 根据y坐标计算答案</span>
    <span class="token keyword">if</span> y <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;A&#39;</span>
    <span class="token keyword">if</span> y <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;B&#39;</span>
    <span class="token keyword">if</span> y <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;C&#39;</span>
    <span class="token keyword">if</span> y <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&#39;D&#39;</span>
</code></pre></div><p>细化到考生选了哪个选项，并将答案暂存。在后续会将其与正确答案对比来判断对错</p><p>因为答案是竖着排列的，同时只有四个选项且间隔相同，所以选项的 <code>y</code> 坐标一定与 <code>4</code> 有着一定的数学关系。通过简单分析可知，当取余后为 <code>1</code> 的则是 <code>A</code>， 而 <code>D</code> 作为第四个选项，恰好能除尽 <code>4</code>。以此类推</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">judge0</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39;传入题号和答案的x、y坐标，返回(题号,答案)&#39;&#39;&#39;</span>
    <span class="token comment"># 返回题号和答案</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>judgeQ<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> judgeAns<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>将上述函数整合，我们就能得到 题号 和题号对应的 考生答案</p><p><img src="`+i+`" alt="image-20240218134340820"></p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 对原图像和灰度图像进行四点透视变换</span>
paper <span class="token operator">=</span> four_point_transform<span class="token punctuation">(</span>img<span class="token punctuation">,</span> docCnt<span class="token punctuation">)</span>
warped <span class="token operator">=</span> four_point_transform<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> docCnt<span class="token punctuation">)</span>

 <span class="token comment"># 对灰度图像进行自适应阈值二值化</span>
thresh <span class="token operator">=</span> cv2<span class="token punctuation">.</span>adaptiveThreshold<span class="token punctuation">(</span>warped<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>ADAPTIVE_THRESH_MEAN_C<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment"># 将二值化图像、原图像和灰度图像调整为指定的宽度和高度</span>
thresh<span class="token punctuation">,</span> paper<span class="token punctuation">,</span> warped <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> img<span class="token punctuation">:</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>INTER_LANCZOS4<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>thresh<span class="token punctuation">,</span> paper<span class="token punctuation">,</span> warped<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 对二值化图像进行模糊处理并进行阈值二值化</span>
ChQImg <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>blur<span class="token punctuation">(</span>thresh<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre></div><p>手机拍摄的图片会有一些角度的偏转，可以找到四个矩形的极点后，基于这四个极点对整张图片进行四点透视变换，把图片调整正，以方便进一步的使用</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 在二值化图像中找到轮廓</span>
cnts <span class="token operator">=</span> cv2<span class="token punctuation">.</span>findContours<span class="token punctuation">(</span>ChQImg<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>RETR_TREE<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>CHAIN_APPROX_SIMPLE<span class="token punctuation">)</span>
cnts <span class="token operator">=</span> cnts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">if</span> imutils<span class="token punctuation">.</span>is_cv3<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> cnts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    
<span class="token comment"># 遍历每一个轮廓</span>
<span class="token keyword">for</span> c <span class="token keyword">in</span> cnts<span class="token punctuation">:</span>
    <span class="token comment"># 获取轮廓的边界框</span>
    x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h <span class="token operator">=</span> cv2<span class="token punctuation">.</span>boundingRect<span class="token punctuation">(</span>c<span class="token punctuation">)</span>

    <span class="token comment"># 如果边界框的宽度和高度在指定范围内</span>
    <span class="token keyword">if</span> <span class="token number">50</span> <span class="token operator">&lt;</span> w <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token keyword">and</span> <span class="token number">20</span> <span class="token operator">&lt;</span> h <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>
        <span class="token comment"># 计算轮廓的质心</span>
        M <span class="token operator">=</span> cv2<span class="token punctuation">.</span>moments<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
        cX <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token string">&quot;m10&quot;</span><span class="token punctuation">]</span> <span class="token operator">/</span> M<span class="token punctuation">[</span><span class="token string">&quot;m00&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        cY <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>M<span class="token punctuation">[</span><span class="token string">&quot;m01&quot;</span><span class="token punctuation">]</span> <span class="token operator">/</span> M<span class="token punctuation">[</span><span class="token string">&quot;m00&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token comment"># 在原图像上画出轮廓和质心</span>
        cv2<span class="token punctuation">.</span>drawContours<span class="token punctuation">(</span>paper<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
        cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>paper<span class="token punctuation">,</span> <span class="token punctuation">(</span>cX<span class="token punctuation">,</span> cY<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

        <span class="token comment"># 将质心坐标添加到答案列表中</span>
        Answer<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>cX<span class="token punctuation">,</span> cY<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>对于二值化后的图找轮廓，然后对轮廓进行矩形拟合，如果找到了跟选项框大小相近的轮廓，就认为是涂黑的选项，然后对这个轮廓求矩值，由这个公式可求出轮廓的重心</p>`,16),v=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mi",null,"c"),n("mi",null,"X"),n("mo",null,"="),n("mi",null,"i"),n("mi",null,"n"),n("mi",null,"t"),n("mo",{stretchy:"false"},"("),n("mi",null,"M"),n("mo",{stretchy:"false"},"["),n("mi",{mathvariant:"normal"},'"'),n("mi",null,"m"),n("mn",null,"10"),n("mi",{mathvariant:"normal"},'"'),n("mo",{stretchy:"false"},"]"),n("mi",{mathvariant:"normal"},"/"),n("mi",null,"M"),n("mo",{stretchy:"false"},"["),n("mi",{mathvariant:"normal"},'"'),n("mi",null,"m"),n("mn",null,"00"),n("mi",{mathvariant:"normal"},'"'),n("mo",{stretchy:"false"},"]"),n("mo",{stretchy:"false"},")"),n("mtext",null,"，"),n("mi",null,"c"),n("mi",null,"Y"),n("mo",null,"="),n("mi",null,"i"),n("mi",null,"n"),n("mi",null,"t"),n("mo",{stretchy:"false"},"("),n("mi",null,"M"),n("mo",{stretchy:"false"},"["),n("mi",{mathvariant:"normal"},'"'),n("mi",null,"m"),n("mn",null,"01"),n("mi",{mathvariant:"normal"},'"'),n("mo",{stretchy:"false"},"]"),n("mi",{mathvariant:"normal"},"/"),n("mi",null,"M"),n("mo",{stretchy:"false"},"["),n("mi",{mathvariant:"normal"},'"'),n("mi",null,"m"),n("mn",null,"00"),n("mi",{mathvariant:"normal"},'"'),n("mo",{stretchy:"false"},"]"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},' cX=int(M["m10"]/M["m00"])，cY=int(M["m01"]/M["m00"]) ')])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"X"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"in"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),n("span",{class:"mopen"},"["),n("span",{class:"mord"},'"'),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord"},'10"'),n("span",{class:"mclose"},"]"),n("span",{class:"mord"},"/"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),n("span",{class:"mopen"},"["),n("span",{class:"mord"},'"'),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord"},'00"'),n("span",{class:"mclose"},"])"),n("span",{class:"mord cjk_fallback"},"，"),n("span",{class:"mord mathnormal"},"c"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.22222em"}},"Y"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"in"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),n("span",{class:"mopen"},"["),n("span",{class:"mord"},'"'),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord"},'01"'),n("span",{class:"mclose"},"]"),n("span",{class:"mord"},"/"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),n("span",{class:"mopen"},"["),n("span",{class:"mord"},'"'),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord"},'00"'),n("span",{class:"mclose"},"])")])])])])],-1),f={class:"custom-container tip"},x=n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])],-1),C=n("p",{class:"custom-container-title"},"提示",-1),A={href:"https://www.jianshu.com/p/6bde79df3f9d",target:"_blank",rel:"noopener noreferrer"},I=s(`<h4 id="_2-2-3-处理数据" tabindex="-1"><a class="header-anchor" href="#_2-2-3-处理数据" aria-hidden="true">#</a> 2.2.3 处理数据</h4><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token comment"># 这里能识别到的最大方框是答题部分的方框，然后根据这个方框就可以推断出其他方框的大致位置</span>
image<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>imgPath<span class="token punctuation">)</span>
<span class="token comment"># 搞到答案的四点坐标</span>
ansCnt<span class="token operator">=</span>getFourPtTrans<span class="token punctuation">(</span>image<span class="token punctuation">)</span>
xy<span class="token operator">=</span>getXY<span class="token punctuation">(</span>ansCnt<span class="token punctuation">)</span>

xy<span class="token operator">=</span>getXY<span class="token punctuation">(</span>ansCnt<span class="token punctuation">)</span>
<span class="token comment"># 切取上半部分的图</span>
stuNum<span class="token operator">=</span>image<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>xy<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>xy<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>xy<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
numCnt<span class="token operator">=</span>getFourPtTrans<span class="token punctuation">(</span>stuNum<span class="token punctuation">)</span>

xy<span class="token operator">=</span>getXY<span class="token punctuation">(</span>numCnt<span class="token punctuation">)</span>
<span class="token comment"># 切右半部分的图，方便识别科目</span>
course<span class="token operator">=</span>image<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">(</span>xy<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>xy<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre></div><p>利用四点坐标将图片进行裁切， 以方便获得对应的信息</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&#39;&#39;&#39;处理答案&#39;&#39;&#39;</span>
width1<span class="token punctuation">,</span>height1<span class="token operator">=</span><span class="token number">2300</span><span class="token punctuation">,</span><span class="token number">1500</span>
ansImg<span class="token punctuation">,</span>Answer<span class="token operator">=</span>markOnImg<span class="token punctuation">(</span>image<span class="token punctuation">,</span>width1<span class="token punctuation">,</span>height1<span class="token punctuation">)</span>
<span class="token comment"># 题号，答题卡上的答案</span>
IDAnswer<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> a <span class="token keyword">in</span> Answer<span class="token punctuation">:</span>
    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>xt1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>xt1<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token keyword">and</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>xt1<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>yt1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>yt1<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token keyword">and</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>yt1<span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                    IDAnswer<span class="token punctuation">.</span>append<span class="token punctuation">(</span>judge0<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

IDAnswer<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
ansImg<span class="token operator">=</span>cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>ansImg<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>标记图像，并获得答案</p><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&#39;&#39;&#39;处理学号&#39;&#39;&#39;</span>
width2<span class="token punctuation">,</span>height2<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1000</span>
numImg<span class="token punctuation">,</span>Answer<span class="token operator">=</span>markOnImg<span class="token punctuation">(</span>stuNum<span class="token punctuation">,</span>width2<span class="token punctuation">,</span>height2<span class="token punctuation">)</span>

Answer<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
yt2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">227</span><span class="token punctuation">,</span><span class="token number">311</span><span class="token punctuation">,</span><span class="token number">374</span><span class="token punctuation">,</span><span class="token number">442</span><span class="token punctuation">,</span><span class="token number">509</span><span class="token punctuation">,</span><span class="token number">577</span><span class="token punctuation">,</span><span class="token number">644</span><span class="token punctuation">,</span><span class="token number">711</span><span class="token punctuation">,</span><span class="token number">781</span><span class="token punctuation">,</span><span class="token number">844</span><span class="token punctuation">]</span>

NO<span class="token operator">=</span><span class="token string">&#39;&#39;</span>
<span class="token keyword">for</span> a <span class="token keyword">in</span> Answer<span class="token punctuation">:</span>
    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>yt2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>yt2<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token keyword">and</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>yt2<span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            NO<span class="token operator">+=</span><span class="token builtin">str</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token keyword">if</span> NO<span class="token operator">==</span><span class="token string">&#39;&#39;</span><span class="token punctuation">:</span>
    NO<span class="token operator">=</span><span class="token string">&quot;Nan&quot;</span>
numImg<span class="token operator">=</span>cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>numImg<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><div class="language-python" data-ext="py"><pre class="language-python"><code><span class="token triple-quoted-string string">&#39;&#39;&#39;处理科目&#39;&#39;&#39;</span>
width3<span class="token punctuation">,</span>height3<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">1000</span>
courseImg<span class="token punctuation">,</span>Answer<span class="token operator">=</span>markOnImg<span class="token punctuation">(</span>course<span class="token punctuation">,</span>width3<span class="token punctuation">,</span>height3<span class="token punctuation">)</span>
yt3<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

s<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>
<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>Answer<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>yt3<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> Answer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>yt3<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token keyword">and</span> Answer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>yt3<span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            s<span class="token operator">=</span>y

courseImg<span class="token operator">=</span>cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>courseImg<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
course_checked<span class="token operator">=</span><span class="token string">&quot;Nan&quot;</span>
<span class="token keyword">if</span> s<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
    course_checked<span class="token operator">=</span>course_list<span class="token punctuation">[</span>s<span class="token punctuation">]</span>

<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>numImg<span class="token punctuation">,</span>courseImg<span class="token punctuation">,</span>ansImg<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>NO<span class="token punctuation">,</span>course_checked<span class="token punctuation">,</span>IDAnswer<span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre></div><p>对答题卡进行透视变换后，每个位置对应的选项和题号都是固定的，通过人为的测量一些位置并记录，即可确定每个坐标对应的选项与题号</p><h2 id="_3-部署项目" tabindex="-1"><a class="header-anchor" href="#_3-部署项目" aria-hidden="true">#</a> 3 部署项目</h2><h3 id="_3-1-准备环境" tabindex="-1"><a class="header-anchor" href="#_3-1-准备环境" aria-hidden="true">#</a> 3.1 准备环境</h3><p>您的 Windows 版本不应低于 Windows 10，否则我无法保证其运行不会报错（未在 Windows 7 及更低的系统测试）</p><p>首先您需要安装以下第三方库</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> scipy <span class="token parameter variable">-i</span>  https://pypi.tuna.tsinghua.edu.cn/simple <span class="token parameter variable">--user</span>
pip <span class="token function">install</span> imutils <span class="token parameter variable">-i</span>  https://pypi.tuna.tsinghua.edu.cn/simple <span class="token parameter variable">--user</span>
pip <span class="token function">install</span> opencv-python <span class="token parameter variable">-i</span>  https://pypi.tuna.tsinghua.edu.cn/simple <span class="token parameter variable">--user</span>
pip <span class="token function">install</span> sv_ttk <span class="token parameter variable">-i</span>  https://pypi.tuna.tsinghua.edu.cn/simple <span class="token parameter variable">--user</span>
</code></pre></div><p>之后请您运行以下代码或直接从 <code>menu.pyw</code> 中启动</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>python menu.pyw
</code></pre></div><p><img src="`+r+'" alt="image-20240218144133774"></p><p>您可以在 <code>test</code> 文件夹下拿到测试材料</p><h3 id="_3-2-如何使用" tabindex="-1"><a class="header-anchor" href="#_3-2-如何使用" aria-hidden="true">#</a> 3.2 如何使用</h3><p>运行后会出现这样一个界面</p><p><img src="'+m+'" alt="image-20240202214744848"></p><p>请点击 <code>考生答案</code> 并上传答题卡，如果您没有相应素材请在 <code>test</code> 文件夹中取用</p><p><img src="'+d+'" alt="image-20240202214847785"></p><p>之后上传正确答案，在 <code>test\\case1</code> 中，有一个 <code>ans1.txt</code>，那个就是提前写好的答案</p><p><img src="'+h+'" alt="image-20240202215028187"></p><p>你也可以按照这样的格式自定义答案，每一个答案后换一行</p><p>之后点击 <code>检查答案</code> 即可</p><p><img src="'+g+'" alt="image-20240202215124766"></p>',27);function M(N,Y){const t=l("ExternalLinkIcon");return e(),c("div",null,[b,w,_,v,n("div",f,[x,C,n("p",null,[a("公式来源于网络 "),n("a",A,[a("OpenCV-Python教程:19.轮廓属性"),u(t)])])]),I])}const R=o(y,[["render",M],["__file","CheckAnswer.html.vue"]]);export{R as default};
